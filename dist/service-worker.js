const CACHE_NAME="story-app-v1",STATIC_CACHE="static-v1",DYNAMIC_CACHE="dynamic-v1",API_CACHE="api-v1",STATIC_ASSETS=["/","/index.html","/manifest.json","/bundle.js","/icons/icon-72x72.png","/icons/icon-96x96.png","/icons/icon-128x128.png","/icons/icon-144x144.png","/icons/icon-152x152.png","/icons/icon-192x192.png","/icons/icon-384x384.png","/icons/icon-512x512.png","/icons/favicon-16x16.png","/icons/favicon-32x32.png","https://unpkg.com/leaflet@1.9.4/dist/leaflet.css","https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"];self.addEventListener("install",(e=>{console.log("[Service Worker] Installing Service Worker..."),e.waitUntil(caches.open("static-v1").then((e=>(console.log("[Service Worker] Precaching App Shell"),e.addAll(STATIC_ASSETS)))))})),self.addEventListener("activate",(e=>{console.log("[Service Worker] Activating Service Worker..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if("static-v1"!==e&&"dynamic-v1"!==e&&"api-v1"!==e)return console.log("[Service Worker] Removing old cache:",e),caches.delete(e)}))))))})),self.addEventListener("fetch",(e=>{"https://story-api.dicoding.dev"===new URL(e.request.url).origin?e.respondWith(fetch(e.request).then((t=>{const i=t.clone();return 200===t.status&&caches.open("api-v1").then((t=>{t.put(e.request,i)})),t})).catch((()=>caches.match(e.request)))):e.respondWith(caches.match(e.request).then((t=>{if(t)return t;const i=e.request.clone();return fetch(i).then((t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const i=t.clone();return caches.open("dynamic-v1").then((t=>{t.put(e.request,i)})),t})).catch((()=>{if(e.request.headers.get("accept").includes("text/html"))return caches.match("/index.html")}))})))})),self.addEventListener("push",(e=>{let t;console.log("[Service Worker] Push Received:",e);try{const i=e.data.json();console.log("[Service Worker] Push data:",i),t={title:i.title||"Story App Notification",options:{body:i.options?.body||"New update available",icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",data:{dateOfArrival:Date.now(),url:"/",primaryKey:1},actions:[{action:"explore",title:"View"},{action:"close",title:"Close"}],vibrate:[100,50,100],requireInteraction:!0}}}catch(i){console.error("[Service Worker] Error parsing push data:",i),t={title:"Story App Notification",options:{body:e.data?e.data.text():"New update available",icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",data:{dateOfArrival:Date.now(),url:"/",primaryKey:1},actions:[{action:"explore",title:"View"},{action:"close",title:"Close"}],vibrate:[100,50,100],requireInteraction:!0}}}e.waitUntil(self.registration.showNotification(t.title,t.options).then((()=>{console.log("[Service Worker] Notification shown successfully")})).catch((e=>{console.error("[Service Worker] Error showing notification:",e)})))})),self.addEventListener("notificationclick",(e=>{console.log("[Service Worker] Notification click received"),e.notification.close();const t=e.notification.data&&e.notification.data.url?e.notification.data.url:"/";"explore"!==e.action&&e.action||e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const i of e)if(i.url===t&&"focus"in i)return i.focus();if(clients.openWindow)return clients.openWindow(t)})))})),self.addEventListener("pushsubscriptionchange",(e=>{console.log("[Service Worker] Push subscription changed");const t=self.registration.pushManager.getSubscription().then((e=>e.options.applicationServerKey));e.waitUntil(t.then((e=>self.registration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e}))).then((e=>(console.log("[Service Worker] New subscription:",e),e))))}));